use clap::Parser;
use config::Config;
use railwind::{parse_to_string, CollectionOptions, Source, SourceOptions};
use std::fs::{self, File};
use std::io::Write;
use std::path::{Path, PathBuf};

mod config;

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Args {
    /// Path to the output file
    #[arg(short, long, default_value = "railwind.css")]
    output: String,

    /// Include the Tailwind preflight in the output file
    #[arg(short = 'p', long, default_value = "false")]
    include_preflight: bool,

    /// Path to the config file
    #[arg(short = 'c', long, default_value = "railwind.config.ron")]
    config: String,

    /// Show warnings generated by parsing files non supported files
    #[arg(long, default_value = "false")]
    show_string_warnings: bool,
}

fn main() {
    let args = Args::parse();

    let mut input: Vec<PathBuf> = Vec::new();
    let output = Path::new(&args.output);
    let mut warnings = Vec::new();

    let config_file = fs::read_to_string(args.config).unwrap();
    let config = ron::from_str::<Config>(&config_file).unwrap();

    for c in config.content {
        if Path::new(&c).is_dir() {
            let dir = Path::new(&c);
            let paths = fs::read_dir(dir).unwrap();
            for file in paths {
                let f = file.unwrap();
                input.push(f.path());
            }
        }
        for entry in globwalk::glob(&c).unwrap() {
            dbg!(&entry);
            match entry {
                Ok(path) => input.push(path.into_path()),
                Err(err) => panic!("{err}"),
            }
        }
    }

    let mut css_file = File::create(output).unwrap();

    for path in input {
        if let Some(extension) = path.extension() {
            let collection_opts: CollectionOptions = extension.into();
            let mut w = Vec::new();

            let css = parse_to_string(
                Source::File(SourceOptions {
                    input: &path,
                    option: collection_opts,
                }),
                args.include_preflight,
                &mut w,
            );

            if args.show_string_warnings {
                warnings.append(&mut w);
            }

            css_file.write_all(css.as_bytes()).unwrap();
        }
    }

    for warning in warnings {
        println!("{}", warning)
    }
}
