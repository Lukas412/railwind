#[derive(Debug, Hash, PartialEq, Eq, Clone)]
pub enum Group {
    Hover,
    Focus,
    FocusWithin,
    FocusVisible,
    Active,
    Visited,
    Target,
    First,
    Last,
    Only,
    Odd,
    Even,
    FirstOfType,
    LastOfType,
    OnlyOfType,
    Empty,
    Disabled,
    Enabled,
    Checked,
    Indeterminate,
    Default,
    Required,
    Valid,
    Invalid,
    InRange,
    OutOfRange,
    PlaceholderShown,
    Autofill,
    ReadOnly,
    Open,
}

impl Group {
    pub fn new(value: &str) -> Option<Self> {
        let g = match value {
            "group-hover" => Self::Hover,
            "group-focus" => Self::Focus,
            "group-focus-within" => Self::FocusWithin,
            "group-focus-visible" => Self::FocusVisible,
            "group-active" => Self::Active,
            "group-visited" => Self::Visited,
            "group-target" => Self::Target,
            "group-first-child" => Self::First,
            "group-last-child" => Self::Last,
            "group-only-child" => Self::Only,
            "group-nth-child(odd)" => Self::Odd,
            "group-nth-child(even)" => Self::Even,
            "group-first-of-type" => Self::FirstOfType,
            "group-last-of-type" => Self::LastOfType,
            "group-only-of-type" => Self::OnlyOfType,
            "group-empty" => Self::Empty,
            "group-disabled" => Self::Disabled,
            "group-enabled" => Self::Enabled,
            "group-checked" => Self::Checked,
            "group-indeterminate" => Self::Indeterminate,
            "group-default" => Self::Default,
            "group-required" => Self::Required,
            "group-valid" => Self::Valid,
            "group-invalid" => Self::Invalid,
            "group-in-range" => Self::InRange,
            "group-out-of-range" => Self::OutOfRange,
            "group-placeholder-shown" => Self::PlaceholderShown,
            "group-autofill" => Self::Autofill,
            "group-readonly" => Self::ReadOnly,
            "group-open" => Self::Open,
            _ => return None,
        };

        Some(g)
    }

    pub fn to_static_str(&self) -> &'static str {
        match self {
            Self::Hover => "group:hover .",
            Self::Focus => "group:focus .",
            Self::FocusWithin => "group:focus-within .",
            Self::FocusVisible => "group:focus-visible .",
            Self::Active => "group:active .",
            Self::Visited => "group:visited .",
            Self::Target => "group:target .",
            Self::First => "group:first-child .",
            Self::Last => "group:last-child .",
            Self::Only => "group:only-child .",
            Self::Odd => "group:nth-child(odd) .",
            Self::Even => "group:nth-child(even) .",
            Self::FirstOfType => "group:first-of-type .",
            Self::LastOfType => "group:last-of-type .",
            Self::OnlyOfType => "group:only-of-type .",
            Self::Empty => "group:empty .",
            Self::Disabled => "group:disabled .",
            Self::Enabled => "group:enabled .",
            Self::Checked => "group:checked .",
            Self::Indeterminate => "group:indeterminate .",
            Self::Default => "group:default .",
            Self::Required => "group:required .",
            Self::Valid => "group:valid .",
            Self::Invalid => "group:invalid .",
            Self::InRange => "group:in-range .",
            Self::OutOfRange => "group:out-of-range .",
            Self::PlaceholderShown => "group:placeholder-shown .",
            Self::Autofill => "group:autofill .",
            Self::ReadOnly => "group:readonly .",
            Self::Open => "group:open .",
        }
    }
}
