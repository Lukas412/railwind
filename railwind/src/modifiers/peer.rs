#[derive(Clone, Copy, PartialEq, Eq, Debug)]
pub enum Peer {
    Hover,
    Focus,
    FocusWithin,
    FocusVisible,
    Active,
    Visited,
    Target,
    First,
    Last,
    Only,
    Odd,
    Even,
    FirstOfType,
    LastOfType,
    OnlyOfType,
    Empty,
    Disabled,
    Enabled,
    Checked,
    Indeterminate,
    Default,
    Required,
    Valid,
    Invalid,
    InRange,
    OutOfRange,
    PlaceholderShown,
    Autofill,
    ReadOnly,
    Open,
}

impl Peer {
    pub fn new(value: &str) -> Option<Self> {
        let g = match value {
            "peer-hover" => Self::Hover,
            "peer-focus" => Self::Focus,
            "peer-focus-within" => Self::FocusWithin,
            "peer-focus-visible" => Self::FocusVisible,
            "peer-active" => Self::Active,
            "peer-visited" => Self::Visited,
            "peer-target" => Self::Target,
            "peer-first-child" => Self::First,
            "peer-last-child" => Self::Last,
            "peer-only-child" => Self::Only,
            "peer-nth-child(odd)" => Self::Odd,
            "peer-nth-child(even)" => Self::Even,
            "peer-first-of-type" => Self::FirstOfType,
            "peer-last-of-type" => Self::LastOfType,
            "peer-only-of-type" => Self::OnlyOfType,
            "peer-empty" => Self::Empty,
            "peer-disabled" => Self::Disabled,
            "peer-enabled" => Self::Enabled,
            "peer-checked" => Self::Checked,
            "peer-indeterminate" => Self::Indeterminate,
            "peer-default" => Self::Default,
            "peer-required" => Self::Required,
            "peer-valid" => Self::Valid,
            "peer-invalid" => Self::Invalid,
            "peer-in-range" => Self::InRange,
            "peer-out-of-range" => Self::OutOfRange,
            "peer-placeholder-shown" => Self::PlaceholderShown,
            "peer-autofill" => Self::Autofill,
            "peer-readonly" => Self::ReadOnly,
            "peer-open" => Self::Open,
            _ => return None,
        };

        Some(g)
    }

    pub fn to_static_str(&self) -> &'static str {
        match self {
            Self::Hover => "peer:hover ~ .",
            Self::Focus => "peer:focus ~ .",
            Self::FocusWithin => "peer:focus-within ~ .",
            Self::FocusVisible => "peer:focus-visible ~ .",
            Self::Active => "peer:active ~ .",
            Self::Visited => "peer:visited ~ .",
            Self::Target => "peer:target ~ .",
            Self::First => "peer:first-child ~ .",
            Self::Last => "peer:last-child ~ .",
            Self::Only => "peer:only-child ~ .",
            Self::Odd => "peer:nth-child(odd) ~ .",
            Self::Even => "peer:nth-child(even) ~ .",
            Self::FirstOfType => "peer:first-of-type ~ .",
            Self::LastOfType => "peer:last-of-type ~ .",
            Self::OnlyOfType => "peer:only-of-type ~ .",
            Self::Empty => "peer:empty ~ .",
            Self::Disabled => "peer:disabled ~ .",
            Self::Enabled => "peer:enabled ~ .",
            Self::Checked => "peer:checked ~ .",
            Self::Indeterminate => "peer:indeterminate ~ .",
            Self::Default => "peer:default ~ .",
            Self::Required => "peer:required ~ .",
            Self::Valid => "peer:valid ~ .",
            Self::Invalid => "peer:invalid ~ .",
            Self::InRange => "peer:in-range ~ .",
            Self::OutOfRange => "peer:out-of-range ~ .",
            Self::PlaceholderShown => "peer:placeholder-shown ~ .",
            Self::Autofill => "peer:autofill ~ .",
            Self::ReadOnly => "peer:readonly ~ .",
            Self::Open => "peer:open ~ .",
        }
    }
}
